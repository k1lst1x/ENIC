"""
–õ–æ–∫–∞–ª—å–Ω—ã–π in-memory –∫—ç—à –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç–∏.

üîí –ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:
–ö—ç—à —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –∫–∞–∫ –æ–±—ã—á–Ω—ã–π Python-—Å–ª–æ–≤–∞—Ä—å –≤ –ø–∞–º—è—Ç–∏ (_cache), –Ω–æ –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —á—Ç–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å–∏
–∑–∞—â–∏—â–µ–Ω—ã —á–µ—Ä–µ–∑ threading.Lock. –≠—Ç–æ –≤–∞–∂–Ω–æ, –ø–æ—Ç–æ–º—É —á—Ç–æ Django –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ.

‚è≥ –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ (TTL):
–ö–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å –≤ –∫—ç—à–µ –∂–∏–≤—ë—Ç —Å—Ç—Ä–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è (TRANSLATION_CACHE_TTL_SECONDS), –ø–æ—Å–ª–µ —á–µ–≥–æ —É–¥–∞–ª—è–µ—Ç—Å—è –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏.

üß† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
- –ö–ª—é—á –∫—ç—à–∞: (–∏—Å—Ö–æ–¥–Ω—ã–π_—Ç–µ–∫—Å—Ç, lang_code)
- –ó–Ω–∞—á–µ–Ω–∏–µ: (–ø–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–π_—Ç–µ–∫—Å—Ç, –≤—Ä–µ–º—è_–∏—Å—Ç–µ—á–µ–Ω–∏—è)
- –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –≤ get_translate() –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–µ—Ä–µ–≤–æ–¥—É
"""

import threading
import time

from .conf import TRANSLATION_CACHE_TTL_SECONDS

# –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫—ç—à–∞:
# (key, lang_code) ‚Üí (translated_value, expires_at)
_cache: dict[tuple[str, str], tuple[str, float]] = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π lock –¥–ª—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
_cache_lock = threading.Lock()


def get_from_cache(key: str, lang_code: str) -> str | None:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—â—ë –Ω–µ –∏—Å—Ç–µ–∫–ª–æ.

    :param key: —Å—Ç—Ä–æ–∫–∞ –Ω–∞ TEMPLATE_LANGUAGE_REFERENCE
    :param lang_code: —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞
    :return: –ø–µ—Ä–µ–≤–æ–¥, –ª–∏–±–æ None, –µ—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∞ —É—Å—Ç–∞—Ä–µ–ª–∞
    """
    now = time.time()
    cache_key = (key, lang_code)

    with _cache_lock:
        item = _cache.get(cache_key)
        if not item:
            return None

        value, expires_at = item
        if now > expires_at:
            del _cache[cache_key]
            return None

        return value


def save_to_cache(key: str, lang_code: str, value: str) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ –∫—ç—à —Å TTL.

    :param key: –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
    :param lang_code: —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞
    :param value: –ø–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    """
    expires_at = time.time() + TRANSLATION_CACHE_TTL_SECONDS
    with _cache_lock:
        _cache[(key, lang_code)] = (value, expires_at)
